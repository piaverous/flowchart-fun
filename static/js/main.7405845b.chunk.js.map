{"version":3,"sources":["constants.ts","utils.ts","components/svgs.tsx","components/Graph.tsx","components/Layout.tsx","components/Edit.tsx","components/ReadOnly.tsx","components/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Layout.module.css","components/Graph.module.css"],"names":["LAYOUT","name","fit","animate","rankDir","spacingFactor","lineColor","idMatch","RegExp","matchColor","colorMap","base","getSize","label","x","resizer","document","getElementById","innerHTML","replace","firstChild","range","createRange","selectNodeContents","width","Array","from","getClientRects","reduce","max","Math","cleanup","floor","height","regressionY","clientHeight","getEdgeLabel","line","hasId","match","lineWithoutId","slice","length","indexOf","split","trim","getNodeLabel","hasColor","value","join","getNodeId","lineNumber","toString","ceil","Twitter","props","xmlns","viewBox","d","Github","cytoscape","prototype","hasInitialised","use","dagre","cytoscapeSvg","Graph","textToParse","setHoverLineNumber","shouldResize","cy","useRef","errorCy","search","useLocation","URLSearchParams","get","useAnimationSetting","layoutSettings","useMemo","layout","updateGraph","useCallback","current","error","newElements","text","matchIndent","lines","strip","preserveNewlines","elements","indentMatch","color","textColor","bgColor","hoverText","hoverBg","linkMatch","indent","parent","checkLine","currentLine","currentLineIndent","source","target","id","map","data","includes","count","parseInt","push","parseText","json","destroy","run","center","handleResize","resize","padding","useEffect","debouncedResize","useDebouncedCallback","window","addEventListener","callback","removeEventListener","downloadImage","svgStr","svg","full","scale","svgEl","DOMParser","parseFromString","squares","children","querySelectorAll","filter","getAttribute","forEach","el","setAttribute","originalTextComment","createComment","appendChild","correctedSvgStr","documentElement","outerHTML","saveAs","Blob","type","nodeHighlight","this","addClass","edgeHighlight","unhighlight","removeClass","undefined","container","style","selector","shape","userZoomingEnabled","userPanningEnabled","boxSelectionEnabled","on","className","styles","GraphContainer","Buttons","p","href","as","onClick","title","Layout","useState","triggerResize","App","defaultSize","maxWidth","minWidth","enable","right","TextareaContainer","handleClasses","resizableHandle","onResizeStop","n","Edit","useParams","workspace","useLocalStorage","Boolean","textarea","setText","useReducer","t","u","setTextToParse","setTextToParseThrottle","useThrottleCallback","hoverLineNumber","editorRef","decorations","flowchartFunSetText","editor","deltaDecorations","startLineNumber","startColumn","endLineNumber","endColumn","options","isWholeLine","defaultValue","minimap","enabled","fontSize","tabSize","insertSpaces","wordBasedSuggestions","occurrencesHighlight","renderLineHighlight","highlightActiveIndentGuide","scrollBeyondLastLine","renderIndentGuides","overviewRulerBorder","lineDecorationsWidth","renderValidationDecorations","hideCursorInOverviewRuler","matchBrackets","selectionHighlight","lineHeight","onChange","onMount","monaco","ReadOnly","graphText","decodeURI","readOnly","Router","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.7405845b.chunk.js","sourcesContent":["export const LAYOUT: any = {\n  name: \"dagre\",\n  fit: true,\n  animate: true,\n  rankDir: \"LR\",\n  spacingFactor: 1.25,\n};\n\nexport const lineColor = \"#000000\";\nexport const textColor = \"#000000\";\n\nexport const defaultText = `this app works by typing\n  new lines create new nodes\n    indentation creates child nodes \n    and any text: before a colon+space creates a label\n  [linking] you can link to nodes using their ID in parentheses\n    like this: (1)\n    lines have a default ID of their line-number\n      but you can also supply a custom ID in brackets\n        like this: (linking) // use single line comments\n      {red}a colored cell can be created like so\n      {blue}you can choose from red, blue, yellow, green, grey and white\n/*\nor \nmultiline \ncomments\n\nHave fun! 🎉\n*/`;\n","import strip from \"@tone-row/strip-comments\";\nimport { CytoscapeOptions } from \"cytoscape\";\nimport { useLocation } from \"react-router-dom\";\n\nconst idMatch = new RegExp(/^\\s*\\[(\\w*)\\]/);\nconst matchColor = new RegExp(/^\\s*\\{(\\w*)\\}/);\n\nconst colorMap: any = {\n  \"white\": {\"text\": \"#000000\", \"bg\": \"#FFFFFF\", \"hoverText\": \"#000000\", \"hoverBg\": \"#EDEDEC\"},\n  \"red\": {\"text\": \"#FFFFFF\", \"bg\": \"#D32F2F\", \"hoverText\": \"#FFFFFF\", \"hoverBg\": \"#B71C1C\"},\n  \"blue\": {\"text\": \"#FFFFFF\", \"bg\": \"#2962FF\", \"hoverText\": \"#FFFFFF\", \"hoverBg\": \"#0D47A1\"},\n  \"green\": {\"text\": \"#000000\", \"bg\": \"#00E676\", \"hoverText\": \"#000000\", \"hoverBg\": \"#00C853\"},\n  \"yellow\": {\"text\": \"#000000\", \"bg\": \"#EEFF41\", \"hoverText\": \"#000000\", \"hoverBg\": \"#CDDC39\"},\n  \"grey\": {\"text\": \"#000000\", \"bg\": \"#BDBDBD\", \"hoverText\": \"#000000\", \"hoverBg\": \"#9E9E9E\"},\n  \"purple\": {\"text\": \"#FFFFFF\", \"bg\": \"#7c4dff\", \"hoverText\": \"#FFFFFF\", \"hoverBg\": \"#651fff\"},\n}\n\nexport function parseText(text: string) {\n  const matchIndent = new RegExp(/^( )+/g);\n  const lines = strip(text, { preserveNewlines: true }).split(\"\\n\");\n  let elements: CytoscapeOptions[\"elements\"] = [];\n  let lineNumber = 1;\n\n  // Loop\n  for (let line of lines) {\n    if (line.trim() === \"\") {\n      lineNumber++;\n      continue;\n    }\n    let indentMatch = line.match(matchIndent);\n    let color: RegExpMatchArray | null | string = line.match(matchColor);\n    color = color ? color[1] : \"white\"\n    const textColor = colorMap[color][\"text\"] \n    const bgColor = colorMap[color][\"bg\"] \n    const hoverText = colorMap[color][\"hoverText\"] \n    const hoverBg = colorMap[color][\"hoverBg\"] \n\n    let linkMatch: RegExpMatchArray | null | string = getNodeLabel(line).match(\n      /^\\((.+)\\)$/\n    );\n    if (linkMatch) {\n      linkMatch = linkMatch[1];\n    }\n\n    if (indentMatch) {\n      const indent = indentMatch[0];\n      let parent;\n      let checkLine = lineNumber;\n      let checkLength = indent.length;\n\n      while (checkLine >= 1) {\n        checkLine -= 1;\n        let currentLine = lines[checkLine - 1];\n\n        /* Determine whether valid line */\n        if (currentLine.trim() === \"\") {\n          continue;\n        }\n\n        const currentLineIndent = currentLine.match(matchIndent);\n        checkLength = currentLineIndent?.[0].length ?? 0;\n        if (checkLength < indent.length) {\n          parent = checkLine;\n          break;\n        }\n      }\n      // If we found a parent\n      if (parent) {\n        const source = getNodeId(lines[checkLine - 1], checkLine);\n        const target = linkMatch ? linkMatch : getNodeId(line, lineNumber);\n\n        // Find a unique id\n        let id = `${source}_${target}:0`;\n        while (elements.map(({ data: { id } }) => id).includes(id)) {\n          let [, count] = id.split(\":\");\n          count = (parseInt(count, 10) + 1).toString();\n          id = `${source}_${target}:${count}`;\n        }\n        elements.push({\n          data: {\n            id,\n            source,\n            target,\n            label: getEdgeLabel(line),\n            lineNumber,\n          },\n        });\n      }\n    }\n    if (!linkMatch) {\n      const label = getNodeLabel(line);\n\n      // Check for custom id\n      const hasId = line.match(idMatch);\n      elements.push({\n        data: {\n          id: hasId ? hasId[1] : lineNumber.toString(),\n          label,\n          lineNumber,\n          textColor,\n          bgColor,\n          hoverText,\n          hoverBg,\n          ...getSize(label),\n        },\n      });\n    }\n    lineNumber++;\n  }\n  return elements;\n}\n\nconst base = 12.5;\nconst minWidth = 8 * base;\nconst minHeight = 6 * base;\n\nfunction getSize(label: string) {\n  const resizer = document.getElementById(\"resizer\");\n  if (resizer) {\n    // TODO: Widen boxes as box height climbs\n    // resizer.style.width = \"128px\";\n    // const initialHeight = resizer.clientHeight;\n    // const add = Math.max(0, Math.ceil((initialHeight - 150) / 50)) * 8;\n    // resizer.style.width = `${128 + add}px`;\n    resizer.innerHTML = preventBreakOnHypen(label);\n    if (resizer.firstChild) {\n      const range = document.createRange();\n      range.selectNodeContents(resizer.firstChild);\n      const width = Array.from(range.getClientRects()).reduce(\n        (max, { width }) => (width > max ? width : max),\n        0\n      );\n      const finalSize = {\n        width: Math.max(minWidth, cleanup(regressionX(width))),\n        height: Math.max(minHeight, cleanup(regressionY(resizer.clientHeight))),\n      };\n      return finalSize;\n    }\n  }\n  return undefined;\n}\n\nfunction getEdgeLabel(line: string) {\n  const hasId = line.match(idMatch);\n  const lineWithoutId = hasId ? line.slice(hasId[0].length) : line;\n  if (lineWithoutId.indexOf(\": \") > -1) {\n    return lineWithoutId.split(\": \")[0].trim();\n  }\n  return \"\";\n}\nfunction getNodeLabel(line: string) {\n  const hasId = line.match(idMatch);\n  const hasColor = line.match(matchColor);\n  const lineWithoutId = hasId ? line.slice(hasId[0].length).trim() : line;\n  const lineWithoutColor = hasColor ? lineWithoutId.slice(hasColor[0].length) : lineWithoutId;\n  let value = lineWithoutColor.trim();\n  if (lineWithoutId.indexOf(\": \") > -1) {\n    value = lineWithoutId.split(\": \").slice(1).join(\": \").trim();\n  }\n  return stripSlashes(value);\n}\n\nfunction getNodeId(line: string, lineNumber: number) {\n  const hasId = line.match(idMatch);\n  return hasId ? hasId[1] : lineNumber.toString();\n}\n\n// linear regression of text node width to graph node size\nfunction regressionX(x: number) {\n  return Math.floor(0.63567 * x + 6);\n}\nfunction regressionY(x: number) {\n  return Math.floor(0.63567 * x + 20);\n}\n\n// put things roughly on the same scale\nfunction cleanup(x: number) {\n  return Math.ceil(x / base) * base;\n}\n\nfunction stripSlashes(str: string) {\n  return str.replace(/\\\\(.)/gm, \"$1\");\n}\n\nfunction preventBreakOnHypen(str: string) {\n  return str.replace(/-/gm, \"&#x2011;\");\n}\n\nexport function useAnimationSetting() {\n  let { search } = useLocation();\n  const query = new URLSearchParams(search);\n  const animation = query.get(\"animation\");\n  return animation === \"0\" ? false : true;\n}\n","export function Twitter(props: any) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={20}\n      height={20}\n      viewBox=\"0 0 24 24\"\n      {...props}\n    >\n      <path d=\"M24 4.557a9.83 9.83 0 01-2.828.775 4.932 4.932 0 002.165-2.724 9.864 9.864 0 01-3.127 1.195 4.916 4.916 0 00-3.594-1.555c-3.179 0-5.515 2.966-4.797 6.045A13.978 13.978 0 011.671 3.149a4.93 4.93 0 001.523 6.574 4.903 4.903 0 01-2.229-.616c-.054 2.281 1.581 4.415 3.949 4.89a4.935 4.935 0 01-2.224.084 4.928 4.928 0 004.6 3.419A9.9 9.9 0 010 19.54a13.94 13.94 0 007.548 2.212c9.142 0 14.307-7.721 13.995-14.646A10.025 10.025 0 0024 4.557z\" />\n    </svg>\n  );\n}\n\nexport function Github() {\n  return (\n    <svg\n      viewBox=\"0 0 24 24\"\n      width={20}\n      height={20}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <title>{\"GitHub icon\"}</title>\n      <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n    </svg>\n  );\n}\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport cytoscape, {\n  Core,\n  EdgeSingular,\n  Layouts,\n  NodeSingular,\n} from \"cytoscape\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { Box, Type, Layout } from \"@tone-row/slang\";\nimport dagre from \"cytoscape-dagre\";\nimport cytoscapeSvg from \"cytoscape-svg\";\nimport { LAYOUT, lineColor } from \"../constants\";\nimport { parseText, useAnimationSetting } from \"../utils\";\nimport { Github, Twitter } from \"./svgs\";\nimport styles from \"./Graph.module.css\";\nimport { saveAs } from \"file-saver\";\n\nif (!cytoscape.prototype.hasInitialised) {\n  cytoscape.use(dagre);\n  cytoscape.use(cytoscapeSvg);\n  cytoscape.prototype.hasInitialised = true;\n}\n\nfunction Graph({\n  textToParse,\n  setHoverLineNumber,\n  shouldResize,\n}: {\n  textToParse: string;\n  setHoverLineNumber: Dispatch<SetStateAction<number | undefined>>;\n  shouldResize: number;\n}) {\n  const cy = useRef<undefined | Core>();\n  const errorCy = useRef<undefined | Core>();\n  const animate = useAnimationSetting();\n  const layoutSettings = useMemo(() => ({ ...LAYOUT, animate }), [animate]);\n  const layout = useRef<undefined | Layouts>();\n\n  const updateGraph = useCallback(() => {\n    if (cy.current) {\n      let error = false;\n      let newElements: cytoscape.ElementDefinition[] = [];\n      try {\n        newElements = parseText(textToParse);\n        errorCy.current?.json({ elements: newElements });\n      } catch {\n        error = true;\n        errorCy.current?.destroy();\n        errorCy.current = cytoscape();\n      }\n      if (!error) {\n        cy.current.json({ elements: newElements });\n        cy.current.layout(layoutSettings as any).run();\n        cy.current.center();\n\n      }\n    }\n  }, [layoutSettings, textToParse]);\n\n  const handleResize = useCallback(() => {\n    if (cy.current) {\n      cy.current.resize();\n      cy.current.animate({ fit: { padding: 6 } } as any);\n    }\n  }, []);\n\n  useEffect(() => {\n    handleResize();\n  }, [handleResize, shouldResize]);\n\n  const debouncedResize = useDebouncedCallback(handleResize, 250);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", debouncedResize.callback);\n    return () => window.removeEventListener(\"resize\", debouncedResize.callback);\n  }, [debouncedResize]);\n\n  const downloadImage = useCallback(() => {\n    if (cy.current) {\n      // @ts-ignore\n      const svgStr = cy.current.svg({ full: true, scale: 1.5 });\n      const domparser = new DOMParser();\n      let svgEl = domparser.parseFromString(svgStr, \"image/svg+xml\");\n      let squares: Element[] = [\n        ...svgEl.children[0].querySelectorAll(\"path\"),\n      ].filter(\n        (x) =>\n          !x.getAttribute(\"fill\") &&\n          x.getAttribute(\"paint-order\") === \"fill stroke markers\"\n      );\n      squares = [...squares, ...svgEl.children[0].querySelectorAll(\"rect\")];\n      squares.forEach((el) => el.setAttribute(\"fill\", \"#ffffff\"));\n\n      // Add comment\n      const originalTextComment = svgEl.createComment(\n        `Original Flowchart Text (flowchart.fun):\\n\\n${textToParse}\\n\\n`\n      );\n      svgEl.children[0].appendChild(originalTextComment);\n      const correctedSvgStr = svgEl.documentElement.outerHTML;\n      saveAs(\n        new Blob([correctedSvgStr], {\n          type: \"image/svg+xml;charset=utf-8\",\n        }),\n        \"flowchart.svg\"\n      );\n    }\n  }, [textToParse]);\n\n  useEffect(() => {\n    errorCy.current = cytoscape();\n    cy.current = cytoscape({\n      container: document.getElementById(\"cy\"), // container to render in\n      layout: layoutSettings,\n      elements: [],\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            \"backgroundColor\": \"data(bgColor)\",\n            \"border-color\": lineColor,\n            \"color\": \"data(textColor)\",\n            label: \"data(label)\",\n            \"font-size\": 10,\n            \"text-wrap\": \"wrap\",\n            \"text-max-width\": \"80\",\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            // @ts-ignore\n            \"line-height\": 1.25,\n            \"border-width\": 1,\n            shape: \"rectangle\",\n            \"font-family\":\n              \"-apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol\",\n            width: \"data(width)\",\n            height: \"data(height)\",\n          },\n        },\n        {\n          selector: \"edge\",\n          style: {\n            // @ts-ignore\n            \"loop-direction\": \"0deg\",\n            \"loop-sweep\": \"20deg\",\n            width: 1,\n            \"text-background-opacity\": 1,\n            \"text-background-color\": \"#ffffff\",\n            \"line-color\": lineColor,\n            \"target-arrow-color\": lineColor,\n            \"target-arrow-shape\": \"vee\",\n            \"arrow-scale\": 1,\n            \"curve-style\": \"bezier\",\n            label: \"data(label)\",\n            \"font-size\": 10,\n            \"text-valign\": \"center\",\n            \"font-family\":\n              \"-apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol\",\n            \"text-halign\": \"center\",\n            // @ts-ignore\n            \"edge-text-rotation\": \"autorotate\",\n          },\n        },\n        {\n          selector: \".edgeHovered\",\n          style: {\n            \"line-color\": \"#aaaaaa\",\n            \"target-arrow-color\": \"#aaaaaa\",\n            color: \"#aaaaaa\",\n          },\n        },\n        {\n          selector: \".nodeHovered\",\n          style: {\n            \"backgroundColor\": \"data(hoverBg)\",\n            \"color\": \"data(hoverText)\",\n          },\n        },\n      ],\n      userZoomingEnabled: true,\n      userPanningEnabled: true,\n      boxSelectionEnabled: false,\n    });\n\n    // Hovering Events\n    function nodeHighlight(this: NodeSingular) {\n      this.addClass(\"nodeHovered\");\n      setHoverLineNumber(this.data().lineNumber);\n    }\n    function edgeHighlight(this: EdgeSingular) {\n      this.addClass(\"edgeHovered\");\n      setHoverLineNumber(this.data().lineNumber);\n    }\n    function unhighlight(this: NodeSingular | EdgeSingular) {\n      this.removeClass(\"nodeHovered\");\n      this.removeClass(\"edgeHovered\");\n      setHoverLineNumber(undefined);\n    }\n    cy.current.on(\"mouseover\", \"node\", nodeHighlight);\n    cy.current.on(\"mouseover\", \"edge\", edgeHighlight);\n    cy.current.on(\"tapstart\", \"node\", nodeHighlight);\n    cy.current.on(\"tapstart\", \"edge\", edgeHighlight);\n    cy.current.on(\"mouseout\", \"node, edge\", unhighlight);\n    cy.current.on(\"tapend\", \"node, edge\", unhighlight);\n\n    return () => {\n      cy.current?.destroy();\n      errorCy.current?.destroy();\n      layout.current = undefined;\n    };\n  }, [layoutSettings, setHoverLineNumber]);\n\n  useEffect(() => {\n    updateGraph();\n  }, [updateGraph]);\n\n  return (\n    <Box className={styles.GraphContainer}>\n      <Layout id=\"cy\" />\n      <Box className={styles.Buttons} p={1}>\n        <div>\n          <Type>Tone Row</Type>\n          <a href=\"https://twitter.com/row_tone\">\n            <Twitter />\n          </a>\n          <a href=\"https://github.com/tone-row/flowchart-fun\">\n            <Github />\n          </a>\n          {/* <a\n            href={`${new URL(window.location.href).origin}/r/${encodeURI(\n              textToParse\n            )}`}\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            Share\n          </a> */}\n        </div>\n        <Type as=\"button\" onClick={downloadImage} title=\"Download SVG\">\n          Download SVG\n        </Type>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Graph;\n","import { Layout as SlangLayout } from \"@tone-row/slang\";\nimport styles from \"./Layout.module.css\";\nimport { Resizable } from \"re-resizable\";\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\";\nimport Graph from \"./Graph\";\n\nexport default function Layout({\n  children,\n  textToParse,\n  setHoverLineNumber,\n}: {\n  children?: ReactNode;\n  textToParse: string;\n  setHoverLineNumber: Dispatch<SetStateAction<number | undefined>>;\n}) {\n  const [shouldResize, triggerResize] = useState(0);\n  return (\n    <SlangLayout className={styles.App}>\n      <Resizable\n        defaultSize={{\n          width: \"50%\",\n          height: \"auto\",\n        }}\n        maxWidth=\"90%\"\n        minWidth=\"10%\"\n        enable={{ right: true }}\n        className={styles.TextareaContainer}\n        handleClasses={{ right: styles.resizableHandle }}\n        onResizeStop={() => triggerResize((n) => n + 1)}\n      >\n        {children}\n      </Resizable>\n      <Graph\n        textToParse={textToParse}\n        setHoverLineNumber={setHoverLineNumber}\n        shouldResize={shouldResize}\n      />\n      <div id=\"resizer\" className={styles.resizer} />\n    </SlangLayout>\n  );\n}\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\nimport { useThrottleCallback } from \"@react-hook/throttle\";\nimport useLocalStorage from \"react-use-localstorage\";\nimport Editor from \"@monaco-editor/react\";\nimport { useParams } from \"react-router\";\nimport { defaultText } from \"../constants\";\nimport Layout from \"./Layout\";\n\nfunction Edit() {\n  const { workspace = \"\" } = useParams<{ workspace?: string }>();\n  const [textarea, setText] = useLocalStorage(\n    [\"flowcharts.fun\", workspace].filter(Boolean).join(\":\"),\n    defaultText\n  );\n  const [textToParse, setTextToParse] = useReducer(\n    (t: string, u: string) => u,\n    textarea\n  );\n  const setTextToParseThrottle = useThrottleCallback(setTextToParse, 2);\n  const [hoverLineNumber, setHoverLineNumber] = useState<undefined | number>();\n  const editorRef = useRef(null);\n  const decorations = useRef<any[]>([]);\n\n  useEffect(() => {\n    // @ts-ignore\n    window.flowchartFunSetText = setText;\n\n    if (editorRef.current) {\n      const editor = editorRef.current;\n      if (typeof hoverLineNumber === \"number\") {\n        //@ts-ignore\n        decorations.current = editor.deltaDecorations(\n          [],\n          [\n            {\n              range: {\n                startLineNumber: hoverLineNumber,\n                startColumn: 1,\n                endLineNumber: hoverLineNumber,\n                endColumn: 1,\n              },\n              options: {\n                isWholeLine: true,\n                className: \"node-hover\",\n              },\n            },\n          ]\n        );\n      } else {\n        // @ts-ignore\n        decorations.current = editor.deltaDecorations(decorations.current, []);\n      }\n    }\n\n    return () => {\n      // @ts-ignore\n      delete window.flowchartFunSetText;\n    };\n  }, [hoverLineNumber, setText]);\n\n  useEffect(() => {\n    setTextToParseThrottle(textarea);\n  }, [textarea, setTextToParseThrottle]);\n\n  return (\n    <Layout setHoverLineNumber={setHoverLineNumber} textToParse={textToParse}>\n      <Editor\n        defaultValue={textarea}\n        options={{\n          minimap: { enabled: false },\n          fontSize: 16,\n          tabSize: 2,\n          insertSpaces: true,\n          wordBasedSuggestions: false,\n          occurrencesHighlight: false,\n          renderLineHighlight: false,\n          highlightActiveIndentGuide: false,\n          scrollBeyondLastLine: false,\n          renderIndentGuides: false,\n          overviewRulerBorder: false,\n          lineDecorationsWidth: \"10px\",\n          renderValidationDecorations: \"off\",\n          hideCursorInOverviewRuler: true,\n          matchBrackets: \"never\",\n          selectionHighlight: false,\n          lineHeight: 28,\n        }}\n        onChange={(value) => value && setText(value)}\n        onMount={(editor, monaco) => {\n          editorRef.current = editor;\n        }}\n      />\n    </Layout>\n  );\n}\n\nexport default Edit;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Editor from \"@monaco-editor/react\";\nimport { useParams } from \"react-router\";\nimport Layout from \"./Layout\";\n\nfunction ReadOnly() {\n  const { graphText } = useParams<{ graphText: string }>();\n  const textToParse = decodeURI(graphText);\n  const [hoverLineNumber, setHoverLineNumber] = useState<undefined | number>();\n  const editorRef = useRef(null);\n  const decorations = useRef<any[]>([]);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = editorRef.current;\n      if (typeof hoverLineNumber === \"number\") {\n        //@ts-ignore\n        decorations.current = editor.deltaDecorations(\n          [],\n          [\n            {\n              range: {\n                startLineNumber: hoverLineNumber,\n                startColumn: 1,\n                endLineNumber: hoverLineNumber,\n                endColumn: 1,\n              },\n              options: {\n                isWholeLine: true,\n                className: \"node-hover\",\n              },\n            },\n          ]\n        );\n      } else {\n        // @ts-ignore\n        decorations.current = editor.deltaDecorations(decorations.current, []);\n      }\n    }\n  }, [hoverLineNumber]);\n\n  return (\n    <Layout setHoverLineNumber={setHoverLineNumber} textToParse={textToParse}>\n      <Editor\n        defaultValue={textToParse}\n        value={textToParse}\n        options={{\n          minimap: { enabled: false },\n          fontSize: 16,\n          tabSize: 2,\n          insertSpaces: true,\n          wordBasedSuggestions: false,\n          occurrencesHighlight: false,\n          renderLineHighlight: false,\n          highlightActiveIndentGuide: false,\n          scrollBeyondLastLine: false,\n          renderIndentGuides: false,\n          overviewRulerBorder: false,\n          lineDecorationsWidth: \"10px\",\n          renderValidationDecorations: \"off\",\n          hideCursorInOverviewRuler: true,\n          matchBrackets: \"never\",\n          selectionHighlight: false,\n          lineHeight: 28,\n          // model: null,\n          readOnly: true,\n        }}\n        onMount={(editor, monaco) => {\n          editorRef.current = editor;\n        }}\n      />\n    </Layout>\n  );\n}\n\nexport default ReadOnly;\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Edit from \"./Edit\";\nimport ReadOnly from \"./ReadOnly\";\n\nexport default function Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Edit />\n        </Route>\n        <Route path=\"/r/:graphText\">\n          <ReadOnly />\n        </Route>\n        <Route path=\"/:workspace\">\n          <Edit />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import Router from \"./components/Router\";\n\nexport default function App() {\n  return <Router />;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"@tone-row/slang/build/index.css\";\nimport \"./slang.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Layout_App__r8LpH\",\"TextareaContainer\":\"Layout_TextareaContainer__eh1Jz\",\"resizer\":\"Layout_resizer__2zJLY\",\"resizableHandle\":\"Layout_resizableHandle__ZoYfz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GraphContainer\":\"Graph_GraphContainer__1TxTa\",\"Buttons\":\"Graph_Buttons__1zZ_M\"};"],"sourceRoot":""}